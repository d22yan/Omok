<!-- http://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml --><!DOCTYPE html><?php 	require_once(__DIR__.'/ConnectToDatabase.php');?> <script src="Utilities.js"></script><script> //http://stackoverflow.com/questions/547384/where-do-you-include-the-jquery-library-from-google-jsapi-cdn    document.write([        "\<script src='",        ("https:" == document.location.protocol) ? "https://" : "http://",        "ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js' type='text/javascript'>\<\/script>" // https://developers.google.com/speed/libraries/devguide#jquery    ].join(''));</script><script>	var aiMode = 0;	var colorTurn = 'black';	var connectedFivePoints = new Array(); 	var gameId;	var grid;	var moveCounter = 0;	var Point = (function() { // http://stackoverflow.com/questions/12610394/javascript-classes/12610555#12610555	    function Point(){	        this._state = undefined;	    };	    Point.prototype.getState = function() {	        return this._state;	    };	    Point.prototype.setState = function(state) {	        this._state = state;	    };	    return Point;	})();	function assert(condition, message) {		if(!condition) {			throw message || 'Assertion failed';		}	}	function changeWhosMove() {		if(colorTurn == 'black') {			colorTurn = 'white';		} else {			colorTurn = 'black';		}	}	function checkConnectFive(selectedColor, selectedX, selectedY) {		var selectedCounter = 0;		connectedFivePoints[0] = convertToDecimal(selectedX, selectedY);		var checkConnectFiveDirection = function(currentX, currentY, directionX, directionY) {			selectedCounter = 0;			return checkConnectFiveDirectionRecurse(currentX, currentY, directionX, directionY);		}		var checkConnectFiveDirectionRecurse = function(currentX, currentY, directionX, directionY) {			var nextX = currentX*1 + directionX*1; // http://stackoverflow.com/questions/4841373/how-to-force-js-to-do-math-instead-of-putting-two-strings-together			var nextY = currentY*1 + directionY*1;			if (nextX < 0 || nextX > 14 || nextY < 0 || nextY > 14) {				return 0;			}			if (selectedColor == grid[nextX][nextY].getState()) {				selectedCounter++;				connectedFivePoints[selectedCounter] = convertToDecimal(nextX, nextY);				return checkConnectFiveDirection(nextX, nextY, directionX, directionY) + 1;			}			return 0;		}		if ((checkConnectFiveDirection(selectedX, selectedY, -1, 0) + checkConnectFiveDirection(selectedX, selectedY, 1, 0)) == 4 ||			(checkConnectFiveDirection(selectedX, selectedY, -1, 1) + checkConnectFiveDirection(selectedX, selectedY, 1, -1)) == 4 ||			(checkConnectFiveDirection(selectedX, selectedY, 0, 1) + checkConnectFiveDirection(selectedX, selectedY, 0, -1)) == 4 ||			(checkConnectFiveDirection(selectedX, selectedY, 1, 1) + checkConnectFiveDirection(selectedX, selectedY, -1, -1)) == 4) {			return true;		}		return false;	}	function convertToDecimal(x, y) {		return x*15 + y*1 + 1;	}	function convertToCoordinateX(decimal) {		return decimal/15;	}	function convertToCoordinateY(decimal) {		return decimal%15;	}	function drawGrid(canvasId){		var canvas = document.getElementById(canvasId);		assert(!!canvas.getContext);		var ctx = canvas.getContext('2d');		var offset = 1;		ctx.lineWidth = 2;		for(var i = 0; i < 16; i++) {			ctx.beginPath();			ctx.moveTo(offset + 40*i, 0);			ctx.lineTo(offset + 40*i, 602);			ctx.stroke();		}		for(var i = 0; i < 16; i++) {			ctx.beginPath();			ctx.moveTo(0, offset + 40*i);			ctx.lineTo(602, offset + 40*i);			ctx.stroke();		}	}	function drawStars(canvasId) {		var mycanvas = document.getElementById(canvasId);		assert(!!mycanvas.getContext);		var ctx = mycanvas.getContext('2d');		ctx.fillRect(116, 116, 10, 10);			ctx.fillRect(116, 436, 10, 10);			ctx.fillRect(276, 276, 10, 10);		ctx.fillRect(436, 116, 10, 10);		ctx.fillRect(436, 436, 10, 10);	}	function fetchGameId() {		$.ajax({			type: 'POST',			url: 'OmokGamesManager.php',			data: 'query=fetchGameId',			success: function(data) {				gameId = data;			},			ajax: false		});	}	function fetchScore() {		$.ajax({			type: 'POST',			url: 'OmokGamesManager.php',			data: 'query=fetchScore',			success: function(data) {				var json = $.parseJSON(data);				$('#label-blackscore').html(json.black);				$('#label-whitescore').html(json.white);			}		});	}	function getCurrentStone() {		return colorTurn;	}		function getCurrentStoneClass() {		if(colorTurn == 'black') {			return 'stone-black';		} 		return 'stone-white';	}	function getGridPoint(element) {		var x = parseInt($(element).attr('x'),10);		var y = parseInt($(element).attr('y'),10);		return grid[x][y];	}	function getStoneElement(element) {		return $(element).find('div[id^="stone"]');	}	function initialize() {		grid = new Array(15);		for(var i = 0; i < 15; i++) {			grid[i] = new Array(15);			for(var j = 0; j < 15; j++) {				grid[i][j] = new Point();			}		}	}	function newGame() {		for(var i = 0; i < 15; i++) {			for(var j = 0; j < 15; j++) {				grid[i][j] = "undefined";			}		}		colorTurn = 'black';		moveCounter = 0;		fetchGameId();	}	function updateMove(coordinateX, coordinateY, win) {		var black = 0;		var white = 0;		var coordinateDecimal = convertToDecimal(coordinateX, coordinateY);		if(getCurrentStone() == 'black') {			black = coordinateDecimal;			} else {			white = coordinateDecimal;		}		$.ajax({			type: 'POST',			url: 'OmokGamesManager.php',			data: 'query=updateMove'+				'&gameid='+gameId+				'&move='+moveCounter+				'&black='+black+				'&white='+white+				'&win='+(win*1),			success: function(data) {				 //alert(data);			}		});		}	$(document).ready(function() {		$('#label-menu').click (			function() {				alert('menu');			}		);		$('.label-hover').hover (			function() {				$(this).css('text-shadow','0px 0px 5px #fff');			},			function() {				$(this).css('text-shadow','');			}		);		$('.point').click(			function() {				var gridPoint = getGridPoint(this);				if(typeof(gridPoint.getState()) === 'undefined') {					gridPoint.setState(getCurrentStone());					getStoneElement(this).attr('class', getCurrentStoneClass());					var connectedFive = checkConnectFive(colorTurn, $(this).attr('x'), $(this).attr('y'))					if(connectedFive) {						alert(colorTurn);					}					moveCounter++;					updateMove($(this).attr('x'), $(this).attr('y'), connectedFive);					changeWhosMove();				}			}		);		$('.point').hover(			function() {				var $stoneElement = getStoneElement(this);				if($stoneElement.attr('class') == 'stone-empty') {					getStoneElement(this).attr('class', getCurrentStoneClass());				}			},			function() {				var $stoneElement = getStoneElement(this);				if(typeof(getGridPoint(this).getState()) === 'undefined' && $stoneElement.attr('class') == getCurrentStoneClass()) {					getStoneElement(this).attr('class', 'stone-empty');				}			}		);		drawGrid('board-canvas');		drawStars('board-canvas');		fetchScore();		fetchGameId();		initialize();	});</script><link href='http://fonts.googleapis.com/css?family=Permanent+Marker' rel='stylesheet' type='text/css'> <!-- https://developers.google.com/fonts/docs/getting_started --><link href="omok.css" rel="stylesheet"> <!-- http://stackoverflow.com/questions/9943981/can-self-closing-link-tags-be-problematic --><meta charset="utf-8"> <!-- General Meta Rules - Encoding --><title>omok</title><div id="background"></div><div id="container">	<div id="menu">		<div id="menu-leftcontainer">			<div id="label-black" class="label" color="black">				black			</div>			<div id="label-blackscore" class="label" color="black">				0			</div>			<div id="label-whitescore" class="label" color="white">				0			</div>			<div id="label-white" class="label" color="white">				white			</div>		</div> 		<div id="board-container">			<canvas id="board-canvas" width="562" height="562"></canvas>			<table id="board-table" cellpadding="0" cellspacing="0"><?php	for($i = 0; $i < 15; $i++) {		echo '			<tr>		';		for($j = 0; $j < 15; $j++) {			echo '				<td>					<div id="point-'.$i.'-'.$j.'" class="point" x="'.$i.'" y="'.$j.'">						<div id="stone-'.$i.'-'.$j.'" class="stone-empty" x="'.$i.'" y="'.$j.'"></div>					</div>				</td>			';		}		echo '			</tr>		';	}?>			</table>		</div>		<div id="menu-rightcontainer">			<div id="label-menu" class="label label-hover">				menu			</div>		</div>	</div></div>