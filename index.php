<!DOCTYPE html><?php 	require_once('/ConnectToDatabase.php');?> <link href='http://fonts.googleapis.com/css?family=Permanent+Marker' rel='stylesheet' type='text/css'> <!-- https://developers.google.com/fonts/docs/getting_started --><link href="omok.css" rel="stylesheet"> <!-- http://stackoverflow.com/questions/9943981/can-self-closing-link-tags-be-problematic --><meta charset="utf-8"> <!-- General Meta Rules - Encoding --><title>omok</title><div id="background"></div><div id="root">	<div id="blackboard">		<div id="menu">			<div id="menu-panel">				<div style="visibility:hidden;">dtest</div> <!-- hacks to get margin top for label-title -->				<div id="label-omok" class="label is-clickable">					Omok				</div>				<div id="label-computer" class="label is-clickable">					Computer				</div>				<div id="label-2player" class="label is-clickable">					2 Player				</div>			</div>		</div>		<div id="board">			<div id="board-left-panel">				<div class="label">					black				</div>				<div id="label-score-black" class="label"></div>				<div id="label-score-white" class="label"></div>				<div class="label">					white				</div>			</div>	 		<div id="board-grid">				<canvas id="board-canvas" width="562" height="562"></canvas>				<table id="board-table" cellpadding="0" cellspacing="0">	<?php		for ($i = 0; $i < 15; $i++) {			echo '				<tr>			';			for ($j = 0; $j < 15; $j++) {				echo '					<td>						<div id="point-'.$i.'-'.$j.'" class="point" x="'.$i.'" y="'.$j.'">							<div id="stone-'.$i.'-'.$j.'" class="stone-empty" x="'.$i.'" y="'.$j.'"></div>						</div>					</td>				';			}			echo '				</tr>			';		}	?>				</table>			</div>			<div id="board-right-panel">				<div id="label-newgame" class="label is-clickable">					new game				</div>				<div id="label-exit" class="label is-clickable">					exit				</div>			</div>		</div>	</div></div><!-- http://stackoverflow.com/questions/4396849/does-the-script-tag-position-in-html-affects-performance-of-the-webpage --><script src="http://code.jquery.com/jquery-latest.min.js" type="text/javascript"></script> <!-- http://stackoverflow.com/questions/441412/is-there-a-link-to-the-latest-jquery-library-on-google-apis --><script>	var aiColor = 'white';	var aiMode = 0;	var animationInEffect = true;	var colorTurn = 'black';	var connectedFiveStones = new Array(); 	var gameId;	var gameInProgress = false;	var grid;	var javascriptMaxInt = 9007199254740992;	var lastUserInputCoordinate = 0;	var moveCounter = 0;	var randomNumber = Math.random()*javascriptMaxInt;	var selectedCounter = 0;	var Point = (function() { // http://stackoverflow.com/questions/12610394/javascript-classes/12610555#12610555	    function Point(){	        this._state = undefined;	    };	    Point.prototype.getState = function() {	        return this._state;	    };	    Point.prototype.setState = function(state) {	        this._state = state;	    };	    return Point;	})();	function aiSpiralInverse(stoneColor, checkFunction) {		var rowStart, rowEnd, colStart, colEnd, maxLevel;		rowStart = rowEnd = colStart = colEnd = maxLevel = Math.floor(15/2);		if (typeof grid[maxLevel][maxLevel].getState() === 'undefined' && checkFunction(stoneColor, maxLevel, maxLevel)) {			return convertToDecimal(maxLevel, maxLevel);		}		for (var level = maxLevel - 1; level >= 0; level--) {			for (var right = rowStart - 1; right < 15 - rowEnd + 1; right++) {				if (typeof grid[level][right].getState() === 'undefined' && checkFunction(stoneColor, level, right)) {					console.log("right " + level + " " + right);					return convertToDecimal(level, right);				}			}			rowStart--;			for (var down = colStart; down < 15 - colEnd; down++) {				if (typeof grid[down][15 - level - 1].getState() === 'undefined' && checkFunction(stoneColor, down, 15 - level - 1)) {					console.log("down " + down + " " + (15 - level - 1));					return convertToDecimal(down, 15 - level - 1);				}			}			colStart--;			for (var left = 15 - rowEnd; left > rowStart - 1 ; left--) {				if (typeof grid[15 - level -1][left].getState() === 'undefined' && checkFunction(stoneColor, 15 - level - 1, left)) {					console.log("left " + (15 - level - 1) + " " + left);					return convertToDecimal(15 - level -1, left);				}			}			rowEnd--;			for (var up = 15 - colEnd - 1; up > colStart; up--) {				if (typeof grid[up][level].getState() === 'undefined' && checkFunction(stoneColor, up, level)) {					console.log("up " + up + " " + level);					return convertToDecimal(up, level);				}			}			colEnd--;		}		return 0;	}	function aiMove() {		randomNumber = Math.random()*javascriptMaxInt;		if (gameInProgress && moveCounter < 225) {			var create5sCoordinate = aiSpiralInverse(getCurrentStoneColor(), checkConnectFive);			if (create5sCoordinate > 0) {				console.log("create5sCoordinate");				placeStone(convertToCoordinateX(create5sCoordinate), convertToCoordinateY(create5sCoordinate));				return;			} 			var prevent5sCoordinate = aiSpiralInverse(getPreviousStoneColor(), checkConnectFive);			if (prevent5sCoordinate > 0) {				console.log("prevent5sCoordinate");				placeStone(convertToCoordinateX(prevent5sCoordinate), convertToCoordinateY(prevent5sCoordinate));				return;			}			var createOpen4sCoordinate = aiSpiralInverse(getCurrentStoneColor(), checkOpen4s);			if (createOpen4sCoordinate > 0) {				console.log("createOpen4sCoordinate");				placeStone(convertToCoordinateX(createOpen4sCoordinate), convertToCoordinateY(createOpen4sCoordinate));				return			}			var preventOpen4sCoordinate = aiSpiralInverse(getPreviousStoneColor(), checkOpen4s);			if (preventOpen4sCoordinate > 0) {				console.log("preventOpen4sCoordinate");				placeStone(convertToCoordinateX(preventOpen4sCoordinate), convertToCoordinateY(preventOpen4sCoordinate));				return			}			var create4s4sCoordinate = aiSpiralInverse(getCurrentStoneColor(), check4s4s);			if (create4s4sCoordinate > 0) {				console.log("create4s4sCoordinate");				placeStone(convertToCoordinateX(create4s4sCoordinate), convertToCoordinateY(create4s4sCoordinate));				return			}			var prevent4s4sCoordinate = aiSpiralInverse(getPreviousStoneColor(), check4s4s);			if (prevent4s4sCoordinate > 0) {				console.log("prevent4s4sCoordinate");				placeStone(convertToCoordinateX(prevent4s4sCoordinate), convertToCoordinateY(prevent4s4sCoordinate));				return			}			var create3s4sCoordinate = aiSpiralInverse(getCurrentStoneColor(), check3s4s);			if (create3s4sCoordinate > 0) {				console.log("create3s4sCoordinate");				placeStone(convertToCoordinateX(create3s4sCoordinate), convertToCoordinateY(create3s4sCoordinate));				return			}			var prevent3s4sCoordinate = aiSpiralInverse(getPreviousStoneColor(), check3s4s);			if (prevent3s4sCoordinate > 0) {				console.log("prevent3s4sCoordinate");				placeStone(convertToCoordinateX(prevent3s4sCoordinate), convertToCoordinateY(prevent3s4sCoordinate));				return			}			var create3s3sCoordinate = aiSpiralInverse(getCurrentStoneColor(), check3s3s);			if (create3s3sCoordinate > 0) {				console.log("create3s3sCoordinate");				placeStone(convertToCoordinateX(create3s3sCoordinate), convertToCoordinateY(create3s3sCoordinate));				return			}			var prevent3s3sCoordinate = aiSpiralInverse(getPreviousStoneColor(), check3s3s);			if (prevent3s3sCoordinate > 0) {				console.log("prevent3s3sCoordinate");				placeStone(convertToCoordinateX(prevent3s3sCoordinate), convertToCoordinateY(prevent3s3sCoordinate));				return			}			var create4sCoordinate = aiSpiralInverse(getCurrentStoneColor(), check4s);			if (create4sCoordinate > 0) {				console.log("create4sCoordinate");				placeStone(convertToCoordinateX(create4sCoordinate), convertToCoordinateY(create4sCoordinate));				return			}			var createOpen3sCoordinate = aiSpiralInverse(getCurrentStoneColor(), checkOpen3s);			if (createOpen3sCoordinate > 0) {				console.log("createOpen3sCoordinate");				placeStone(convertToCoordinateX(createOpen3sCoordinate), convertToCoordinateY(createOpen3sCoordinate));				return			}			var preventOpen3sCoordinate = aiSpiralInverse(getPreviousStoneColor(), checkOpen3s);			if (preventOpen3sCoordinate > 0) {				console.log("preventOpen3sCoordinate");				placeStone(convertToCoordinateX(preventOpen3sCoordinate), convertToCoordinateY(preventOpen3sCoordinate));				return			}			var randomMoveCoordinate = aiSpiralInverse(getCurrentStoneColor(), 				function(selectedColor, selectedX, selectedY) {					return (typeof grid[selectedX][selectedY].getState() === 'undefined');				}			);			if (randomMoveCoordinate > 0) {				console.log("randomMoveCoordinate");				placeStone(convertToCoordinateX(randomMoveCoordinate), convertToCoordinateY(randomMoveCoordinate));				return			}			assert(false);		} else {			alert("dtest");		}	}	function assert(condition, message) {		if(!condition) {			throw message || 'Assertion failed';		}	}	function changeColorTurn() {		if(colorTurn == 'black') {			colorTurn = 'white';		} else {			colorTurn = 'black';		}	}	function checkConnectFive(selectedColor, selectedX, selectedY) { 		connectedFiveStones[0] = convertToDecimal(selectedX, selectedY);		return (			checkConnectFiveDirection(selectedColor, selectedX, selectedY, -1, 0, 1, 0) == 4 ||			checkConnectFiveDirection(selectedColor, selectedX, selectedY, -1, 1, 1, -1) == 4 ||			checkConnectFiveDirection(selectedColor, selectedX, selectedY, 0, 1, 0, -1) == 4 ||			checkConnectFiveDirection(selectedColor, selectedX, selectedY, 1, 1, -1, -1) == 4		);	}	function checkConnectFiveDirection(selectedColor, currentX, currentY, directionX, directionY, directionX2, directionY2) {		selectedCounter = 0;		return checkConnectFiveDirectionRecurse(selectedColor, currentX, currentY, directionX, directionY) + checkConnectFiveDirectionRecurse(selectedColor, currentX, currentY, directionX2, directionY2);	}	function checkConnectFiveDirectionRecurse(selectedColor, currentX, currentY, directionX, directionY) {		var nextX = currentX*1 + directionX*1; 		var nextY = currentY*1 + directionY*1;		if (nextX < 0 || nextX > 14 || nextY < 0 || nextY > 14) {			return 0;		}		if (selectedColor == grid[nextX][nextY].getState()) {			selectedCounter++;			connectedFiveStones[selectedCounter] = convertToDecimal(nextX, nextY);			return checkConnectFiveDirectionRecurse(selectedColor, nextX, nextY, directionX, directionY) + 1;		}		return 0;	}	function check3s3s(selectedColor, selectedX, selectedY) {		var directionVertical = checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, 0, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, 0, -1);		var directionForwardSlash = checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, -1, -1);		var directionHorizontal = checkDirectionPathValue(selectedColor, selectedX, selectedY, 0, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 0, -1, -1);		var directionBackSlash = checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, -1, -1);		var open3sCounter = 0;		if (directionVertical == 202) {			open3sCounter++;		}		if (directionForwardSlash == 202) {			open3sCounter++;		}		if (directionHorizontal == 202) {			open3sCounter++;		}		if (directionBackSlash == 202) {			open3sCounter++;		}		return open3sCounter > 1;	}	function check3s4s(selectedColor, selectedX, selectedY) {		var directionVertical = checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, 0, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, 0, -1);		var directionForwardSlash = checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, -1, -1);		var directionHorizontal = checkDirectionPathValue(selectedColor, selectedX, selectedY, 0, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 0, -1, -1);		var directionBackSlash = checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, -1, -1);		return (			directionVertical == 202 ||	directionForwardSlash == 202 ||	directionHorizontal == 202 || directionBackSlash == 202		) && (			directionVertical == 103 ||	directionForwardSlash == 103 ||	directionHorizontal == 103 || directionBackSlash == 103		);	}	function check4s4s(selectedColor, selectedX, selectedY) {		var directionVertical = checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, 0, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, 0, -1);		var directionForwardSlash = checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, -1, -1);		var directionHorizontal = checkDirectionPathValue(selectedColor, selectedX, selectedY, 0, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 0, -1, -1);		var directionBackSlash = checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, -1, -1);		var open3sCounter = 0;		if (directionVertical == 103) {			open3sCounter++;		}		if (directionForwardSlash == 103) {			open3sCounter++;		}		if (directionHorizontal == 103) {			open3sCounter++;		}		if (directionBackSlash == 103) {			open3sCounter++;		}		return open3sCounter > 1;	}	function check4s(selectedColor, selectedX, selectedY) { 		return (			checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, 0, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, 0, -1) == 103 ||			checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, -1, -1) == 103 ||			checkDirectionPathValue(selectedColor, selectedX, selectedY, 0, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 0, -1, -1) == 103 ||			checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, -1, -1) == 103		);	}	function checkOpen3s(selectedColor, selectedX, selectedY) { // TODO refractor		return (			checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, 0, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, 0, -1) == 202 ||			checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, -1, -1) == 202 ||			checkDirectionPathValue(selectedColor, selectedX, selectedY, 0, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 0, -1, -1) == 202 ||			checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, -1, -1) == 202		);	}	function checkOpen4s(selectedColor, selectedX, selectedY) { 		return (			checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, 0, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, 0, -1) == 203 ||			checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, -1, -1) == 203 ||			checkDirectionPathValue(selectedColor, selectedX, selectedY, 0, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, 0, -1, -1) == 203 ||			checkDirectionPathValue(selectedColor, selectedX, selectedY, 1, 1, -1) + checkDirectionPathValue(selectedColor, selectedX, selectedY, -1, -1, -1) == 203		);	}	function checkDirectionPathValue(selectedColor, currentX, currentY, directionX, directionY, counter) { // TODO implement hop checks on 3s4s + prevent 4s hop		var nextX = (currentX * 1) + (directionX * 1); // http://stackoverflow.com/questions/4841373/how-to-force-js-to-do-math-instead-of-putting-two-strings-together		var nextY = (currentY * 1) + (directionY * 1);		if (nextX < 0 || nextX > 14 || nextY < 0 || nextY > 14) {			return 0;		}		if (selectedColor == grid[nextX][nextY].getState()) {			return checkDirectionPathValue(selectedColor, nextX, nextY, directionX, directionY, counter) + 1;		} else if (typeof grid[nextX][nextY].getState() === 'undefined') {			var returnValue = 100;			if (counter == 0) {				returnValue += checkDirectionPathValue(selectedColor, nextX, nextY, directionX, directionY, counter + 1);			}			return returnValue;		}		return 0;	}	function clearConnectedFiveStones() {		for (var i = 0; i < 5; i++) {			if (!(typeof connectedFiveStones[i] === 'undefined')) {				var coordinateX = convertToCoordinateX(connectedFiveStones[i]);				var coordinateY = convertToCoordinateY(connectedFiveStones[i]);				var $elementStone = $('#stone-' + coordinateX + '-' + coordinateY);				$elementStone.css('box-shadow', '');				$elementStone.css('-moz-box-shadow', '');				$elementStone.css('-webkit-box-shadow', '');			}		}		connectedFiveStones = [];	}	function clearGrid() { // TODO animations on clearing stones		fadingAnimationDuration = 100		for (var i = 0; i < 15; i++) {			for (var j = 0; j < 15; j++) {				grid[i][j] = new Point();				var $stoneElement = getStoneElementByCoordinate(i, j);				$stoneElement.attr('class', 'stone-empty');				// $stoneElement.animate({				// 	opacity: 0				// }, fadingAnimationDuration, function() {				// 	$stoneElement.attr('class', 'stone-empty');				// 	$stoneElement.attr('opacity', '1');					// });				//bug cant exit cause animationInEffect is set to true;			}		}		setTimeout(function() {			animationInEffect = false;		}, fadingAnimationDuration);	}	function convertToDecimal(x, y) {		return x*15 + y*1 + 1;	}	function convertToCoordinateX(decimal) {		return Math.floor((decimal - 1) / 15);	}	function convertToCoordinateY(decimal) {		return ((decimal - 1) % 15);	}	function displayConnectedFiveStones() {		for (var i = 0; i < 5; i++) {			var coordinateX = convertToCoordinateX(connectedFiveStones[i]);			var coordinateY = convertToCoordinateY(connectedFiveStones[i]);			var $elementStone = $('#stone-' + coordinateX + '-' + coordinateY);			$elementStone.css('box-shadow', 'inset 0 0 8px #808080, 0px 0px 3px 1px #fff');			$elementStone.css('-moz-box-shadow', 'inset 0 0 8px #808080, 0px 0px 3px 1px #fff');			$elementStone.css('-webkit-box-shadow', 'inset 0 0 8px #808080, 0px 0px 3px 1px #fff');		}	}	function drawGrid(canvasId){		var canvas = document.getElementById(canvasId);		assert(!!canvas.getContext);		var ctx = canvas.getContext('2d');		var offset = 1;		ctx.lineWidth = 2;		for (var i = 0; i < 16; i++) {			ctx.beginPath();			ctx.moveTo(offset + 40*i, 0);			ctx.lineTo(offset + 40*i, 602);			ctx.stroke();		}		for (var i = 0; i < 16; i++) {			ctx.beginPath();			ctx.moveTo(0, offset + 40*i);			ctx.lineTo(602, offset + 40*i);			ctx.stroke();		}	}	function drawStars(canvasId) {		var mycanvas = document.getElementById(canvasId);		assert(!!mycanvas.getContext);		var ctx = mycanvas.getContext('2d');		ctx.fillRect(116, 116, 10, 10);			ctx.fillRect(116, 436, 10, 10);			ctx.fillRect(276, 276, 10, 10);		ctx.fillRect(436, 116, 10, 10);		ctx.fillRect(436, 436, 10, 10);	}	function fetchGameId() {		$.ajax({			type: 'POST',			url: 'OmokGameManager.php',			data: 'query=fetchGameId',			success: function(data) {				gameId = data;			},			ajax: false		});	}	function fetchScore() { // TODO separate comp score		$.ajax({			type: 'POST',			url: 'OmokGameManager.php',			data: 'query=fetchScore',			success: function(data) {				var json = $.parseJSON(data);				$('#label-score-black').html(json.black);				$('#label-score-white').html(json.white);			}		});	}		function gameBegin() {		if (moveCounter != 0 || (typeof gameId === 'undefined')) {			clearConnectedFiveStones();			fetchGameId();			clearGrid();			colorTurn = 'black';			gameInProgress = true;			lastUserInputCoordinate = 0;			moveCounter = 0;		}	}	function gameWin() {		displayConnectedFiveStones();		incrementScorePoint();		gameInProgress = false;	}	function getCurrentStoneColor() {		return colorTurn;	}		function getCurrentStoneClass() {		if (colorTurn == 'black') {			return 'stone-black';		} 		return 'stone-white';	}	function getGridPoint(element) {		var x = parseInt($(element).attr('x'), 10);		var y = parseInt($(element).attr('y'), 10);		return grid[x][y];	}	function getPreviousStoneColor() {		if (colorTurn == 'black') {			return 'white';		}		return 'black'	}	function getStoneElementByCoordinate(selectedX, selectedY) {		return $('#stone-' + selectedX + "-" + selectedY);	}		function getStoneElementByPointElement(element) {		return $(element).find('div[id^="stone"]');	}	function incrementScorePoint() {		var score = $('#label-score-' + colorTurn).html();		$('#label-score-' + colorTurn).html(score*1 + 1);	}	function initializeBoard() {		fetchScore();		drawGrid('board-canvas');		drawStars('board-canvas');		initializeBoardGrid();	}	function initializeMenu() {		$('#menu').animate({			opacity: 1		}, 500, function() {			animationInEffect = false;		});	}	function initializeBoardGrid() {		grid = new Array(15);		for (var i = 0; i < 15; i++) {			grid[i] = new Array(15);			for (var j = 0; j < 15; j++) {				grid[i][j] = new Point();			}		}	}	function main() {		$('#board').hide();		initializeMenu();		initializeBoard();	}	function placeStone(selectedX, selectedY) {		var gridPoint = grid[selectedX][selectedY];		if (typeof gridPoint.getState() === 'undefined') {			gridPoint.setState(getCurrentStoneColor());			getStoneElementByCoordinate(selectedX, selectedY).attr('class', getCurrentStoneClass());			lastUserInputCoordinate = convertToDecimal(selectedX, selectedY);			var connectedFive = checkConnectFive(getCurrentStoneColor(), selectedX, selectedY);			if (connectedFive) {				gameWin();			}			moveCounter++;			updateMove(getCurrentStoneColor(), selectedX, selectedY, connectedFive);			changeColorTurn();			if (aiMode == 1 && gameInProgress == true && moveCounter < 255 && aiColor == getCurrentStoneColor()) {				aiMove();			}		}	}	function showBoard(bool) {		fadingAnimationDuration = 300;		if (!!bool) {			$('#menu').animate({				opacity: 0			}, fadingAnimationDuration, function() {				$('#menu').hide();			 	$('#board').show();				$('#board').animate({					opacity: 1				}, fadingAnimationDuration, function() {					animationInEffect = false;				});			});		} else {			$('#board').animate({				opacity: 0			}, fadingAnimationDuration, function() {				$('#board').hide();			 	$('#menu').show();				$('#menu').animate({					opacity: 1				}, fadingAnimationDuration, function() {					animationInEffect = false;				});			});		}	}	function updateMove(selectedColor, selectedX, selectedY, win) {		var black = 0;		var white = 0;		var selectedCoordinateDecimal = convertToDecimal(selectedX, selectedY);		if(selectedColor == 'black') {			black = selectedCoordinateDecimal;			} else {			white = selectedCoordinateDecimal;		}		$.ajax({			type: 'POST',			url: 'OmokGameManager.php',			data: 'query=updateMove'+				'&gameid='+gameId+				'&move='+moveCounter+				'&black='+black+				'&white='+white+				'&win='+(win*1),			success: function(data) { }		});		}	$(document).ready(function() {		$('#label-computer').click(			function() {				if (!animationInEffect) {					animationInEffect = true;					aiMode = 1;					gameBegin();					showBoard(true);				}			}		)		$('#label-2player').click(			function() {				if (!animationInEffect) {					animationInEffect = true;					aiMode = 0;					gameBegin();					showBoard(true);				}			}		)		$('#label-exit').click(			function() {				if (!animationInEffect) {					animationInEffect = true;					aiMode = 0;					showBoard(false);				}			}		)		$('#label-newgame').click(			function() {				if (!animationInEffect) {					// animationInEffect = true; 					gameBegin();				}			}		);		$('#label-omok').click(			function() {				window.open("http://en.wikipedia.org/wiki/Gomoku#Omok", "_blank");			}		);		$('.point').click(			function() {				if (gameInProgress && (aiMode != 1 || aiColor != getCurrentStoneColor())) {					placeStone(parseInt($(this).attr('x'), 10), parseInt($(this).attr('y'), 10));				}			}		);		$('.point').hover(			function() {				if (gameInProgress && (aiMode != 1 || aiColor != getCurrentStoneColor())) {					var $stoneElement = getStoneElementByPointElement(this);					if ($stoneElement.attr('class') == 'stone-empty') {						getStoneElementByPointElement(this).attr('class', getCurrentStoneClass());					}				}			},			function() {				if (gameInProgress && (aiMode != 1 || aiColor != getCurrentStoneColor())) {					var $stoneElement = getStoneElementByPointElement(this);					if (typeof getGridPoint(this).getState() === 'undefined' && $stoneElement.attr('class') == getCurrentStoneClass()) {						getStoneElementByPointElement(this).attr('class', 'stone-empty');					}				}			}		);		main();	});</script>